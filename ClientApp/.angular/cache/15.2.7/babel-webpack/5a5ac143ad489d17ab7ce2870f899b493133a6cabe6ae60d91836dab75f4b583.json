{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Api } from 'src/app/data/api';\nimport { AuthForm } from 'src/app/data/authForm';\nimport { Constants } from 'src/app/data/constants';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, messageService) {\n    this.authService = authService;\n    this.messageService = messageService;\n    this.title = Constants.login;\n    this.alternativeTitle = Constants.register;\n    this.authForm = new AuthForm();\n    this.isAuthenticated = false;\n    this.authService.isAuthenticated.subscribe(isAuthenticated => {\n      this.isAuthenticated = isAuthenticated;\n      if (this.isAuthenticated) {\n        window.location.href = Api.originApi;\n      }\n    });\n  }\n  changeAction() {\n    let temp = this.title;\n    this.title = this.alternativeTitle;\n    this.alternativeTitle = temp;\n  }\n  action() {\n    if (this.title == Constants.login) {\n      this.login();\n    } else if (this.title == Constants.register) {\n      this.registration();\n    }\n  }\n  login() {\n    this.authService.login(this.authForm).subscribe(ok => {\n      this.authService.isAuthenticated.next(true);\n      this.authService.isAdminQuery().subscribe(isAdmin => this.authService.isAdmin.next(isAdmin));\n      alert(ok);\n    }, error => console.log(error));\n  }\n  registration() {\n    this.authService.registration(this.authForm).subscribe(ok => this.authService.isAuthenticated.next(true), error => console.log(error));\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,SAAS,QAAQ,wBAAwB;AAS3C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAQzBC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAhE,gBAAW,GAAXD,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAPpE,UAAK,GAAWJ,SAAS,CAACK,KAAK;IAC/B,qBAAgB,GAAWL,SAAS,CAACM,QAAQ;IAE7C,aAAQ,GAAa,IAAIP,QAAQ,EAAE;IAEnC,oBAAe,GAAY,KAAK;IAG9B,IAAI,CAACI,WAAW,CAACI,eAAe,CAACC,SAAS,CACxCD,eAAe,IAAG;MAChB,IAAI,CAACA,eAAe,GAAGA,eAAe;MAEtC,IAAI,IAAI,CAACA,eAAe,EAAE;QACxBE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGb,GAAG,CAACc,SAAS;;IAExC,CAAC,CACF;EACH;EAEAC,YAAY;IACV,IAAIC,IAAI,GAAG,IAAI,CAACC,KAAK;IACrB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACC,gBAAgB;IAClC,IAAI,CAACA,gBAAgB,GAAGF,IAAI;EAC9B;EAEAG,MAAM;IACJ,IAAI,IAAI,CAACF,KAAK,IAAIf,SAAS,CAACK,KAAK,EAAE;MACjC,IAAI,CAACA,KAAK,EAAE;KACb,MACI,IAAI,IAAI,CAACU,KAAK,IAAIf,SAAS,CAACM,QAAQ,EAAE;MACzC,IAAI,CAACY,YAAY,EAAE;;EAEvB;EAEAb,KAAK;IACH,IAAI,CAACF,WAAW,CAACE,KAAK,CAAC,IAAI,CAACc,QAAQ,CAAC,CAACX,SAAS,CAC7CY,EAAE,IAAG;MACH,IAAI,CAACjB,WAAW,CAACI,eAAe,CAACc,IAAI,CAAC,IAAI,CAAC;MAC3C,IAAI,CAAClB,WAAW,CAACmB,YAAY,EAAE,CAACd,SAAS,CACvCe,OAAO,IAAI,IAAI,CAACpB,WAAW,CAACoB,OAAO,CAACF,IAAI,CAACE,OAAkB,CAAC,CAC7D;MAEDC,KAAK,CAACJ,EAAa,CAAC;IACtB,CAAC,EACDK,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC5B;EACH;EAEAP,YAAY;IACV,IAAI,CAACf,WAAW,CAACe,YAAY,CAAC,IAAI,CAACC,QAAQ,CAAC,CAACX,SAAS,CACpDY,EAAE,IAAI,IAAI,CAACjB,WAAW,CAACI,eAAe,CAACc,IAAI,CAAC,IAAI,CAAC,EACjDI,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC5B;EACH;CACD;AAvDYxB,cAAc,eAL1BJ,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW7B,cAAc,CAuD1B;SAvDYA,cAAc","names":["Component","Api","AuthForm","Constants","LoginComponent","constructor","authService","messageService","login","register","isAuthenticated","subscribe","window","location","href","originApi","changeAction","temp","title","alternativeTitle","action","registration","authForm","ok","next","isAdminQuery","isAdmin","alert","error","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\LEGA-USER\\source\\repos\\InforceTask\\ClientApp\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Api } from 'src/app/data/api';\nimport { AuthForm } from 'src/app/data/authForm';\nimport { Constants } from 'src/app/data/constants';\nimport { Message } from 'src/app/data/message';\nimport { AuthService } from 'src/app/services/auth-service/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  title: string = Constants.login;\n  alternativeTitle: string = Constants.register;\n\n  authForm: AuthForm = new AuthForm();\n\n  isAuthenticated: boolean = false;\n\n  constructor(private authService: AuthService, private messageService: MessageService) {\n    this.authService.isAuthenticated.subscribe(\n      isAuthenticated => {\n        this.isAuthenticated = isAuthenticated\n\n        if (this.isAuthenticated) {\n          window.location.href = Api.originApi;\n        }\n      }\n    );\n  }\n\n  changeAction() {\n    let temp = this.title;\n    this.title = this.alternativeTitle;\n    this.alternativeTitle = temp;\n  }\n\n  action() {\n    if (this.title == Constants.login) {\n      this.login();\n    }\n    else if (this.title == Constants.register) {\n      this.registration();\n    }\n  }\n\n  login() {\n    this.authService.login(this.authForm).subscribe(\n      ok => {\n        this.authService.isAuthenticated.next(true);\n        this.authService.isAdminQuery().subscribe(\n          isAdmin => this.authService.isAdmin.next(isAdmin as boolean)\n        );\n\n        alert(ok as Message);\n      },\n      error => console.log(error)\n    );\n  }\n\n  registration() {\n    this.authService.registration(this.authForm).subscribe(\n      ok => this.authService.isAuthenticated.next(true),\n      error => console.log(error)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}